#!/usr/bin/env python3
"""
Test visual interactivo para evaluar la visualizaci√≥n del VNC en AUTONOBOT
Este script abre autom√°ticamente las ventanas necesarias para evaluaci√≥n visual
"""

import asyncio
import logging
import subprocess
import sys
import time
import webbrowser
import platform
from typing import Dict, Any
import json

# Configurar logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class VNCVisualInteractiveTest:
    """Test visual interactivo para VNC"""
    
    def __init__(self):
        self.webui_process = None
        self.test_port = 7791
        self.vnc_port = None
        
    async def run_interactive_test(self):
        """Ejecutar test visual interactivo"""
        logger.info("üé® Iniciando test visual interactivo de VNC")
        logger.info("="*60)
        
        try:
            # Paso 1: Iniciar WebUI
            await self.start_webui()
            
            # Paso 2: Abrir navegador autom√°ticamente
            await self.open_browser_windows()
            
            # Paso 3: Gu√≠a interactiva
            await self.interactive_guide()
            
        except KeyboardInterrupt:
            logger.info("\n‚ö†Ô∏è Test interrumpido por el usuario")
        except Exception as e:
            logger.error(f"‚ùå Error en test interactivo: {e}")
        finally:
            await self.cleanup()
    
    async def start_webui(self):
        """Iniciar WebUI para test"""
        logger.info(f"üöÄ Iniciando AUTONOBOT WebUI en puerto {self.test_port}...")
        
        # Iniciar WebUI
        self.webui_process = subprocess.Popen(
            [sys.executable, "webui.py", "--port", str(self.test_port), "--theme", "Base"],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE
        )
        
        # Esperar a que inicie
        logger.info("‚è≥ Esperando que el WebUI inicie...")
        await asyncio.sleep(10)
        
        # Verificar que est√© corriendo
        if self.webui_process.poll() is not None:
            stdout, stderr = self.webui_process.communicate()
            raise Exception(f"WebUI fall√≥ al iniciar: {stderr.decode()}")
        
        logger.info("‚úÖ WebUI iniciado correctamente")
    
    async def open_browser_windows(self):
        """Abrir ventanas del navegador autom√°ticamente"""
        logger.info("üåê Abriendo ventanas del navegador para evaluaci√≥n visual...")
        
        urls_to_open = [
            {
                "url": f"http://127.0.0.1:{self.test_port}",
                "description": "Interfaz principal de AUTONOBOT"
            },
            {
                "url": f"http://127.0.0.1:{self.test_port}?__theme=dark",
                "description": "Interfaz con tema oscuro forzado"
            }
        ]
        
        for i, url_info in enumerate(urls_to_open):
            logger.info(f"üì± Abriendo: {url_info['description']}")
            try:
                webbrowser.open(url_info["url"])
                await asyncio.sleep(2)  # Esperar entre aperturas
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è No se pudo abrir autom√°ticamente: {e}")
                logger.info(f"üîó Abrir manualmente: {url_info['url']}")
    
    async def interactive_guide(self):
        """Gu√≠a interactiva para evaluaci√≥n visual"""
        logger.info("\n" + "="*60)
        logger.info("üéØ GU√çA DE EVALUACI√ìN VISUAL VNC")
        logger.info("="*60)
        
        # Lista de verificaciones visuales
        visual_checks = [
            {
                "step": 1,
                "title": "Verificar Interfaz Cyberpunk",
                "description": "¬øSe ve la interfaz con tema cyberpunk (colores ne√≥n, efectos de brillo)?",
                "details": [
                    "- T√≠tulo: 'AUTONOBOT - Navegador Aut√≥nomo'",
                    "- Colores ne√≥n: cyan (#00ffff), magenta (#ff00ff), verde (#00ff41)",
                    "- Efectos de brillo en bordes y texto",
                    "- Fondo oscuro con gradientes"
                ]
            },
            {
                "step": 2,
                "title": "Verificar Localizaci√≥n en Espa√±ol",
                "description": "¬øEst√°n todos los textos en espa√±ol?",
                "details": [
                    "- Tabs: 'Configuraci√≥n de Agente', 'Agente Interactivo', etc.",
                    "- Botones y etiquetas en espa√±ol",
                    "- Mensajes de estado en espa√±ol"
                ]
            },
            {
                "step": 3,
                "title": "Probar Modo VNC",
                "description": "¬øFunciona el cambio a modo VNC?",
                "details": [
                    "- Ir a tab 'Agente Interactivo'",
                    "- Cambiar de 'Navegador Local' a 'Visor Remoto VNC'",
                    "- Verificar que aparece bot√≥n 'Activar Visor VNC'",
                    "- Hacer clic en 'Activar Visor VNC'"
                ]
            },
            {
                "step": 4,
                "title": "Verificar Visor VNC",
                "description": "¬øSe abre correctamente el visor VNC?",
                "details": [
                    "- Se abre nueva ventana/modal con visor VNC",
                    "- T√≠tulo: 'AUTONOBOT - Visor Remoto'",
                    "- Interfaz cyberpunk en el visor",
                    "- Botones: 'Pantalla Completa', 'Reconectar', 'Cerrar'"
                ]
            },
            {
                "step": 5,
                "title": "Verificar Responsividad M√≥vil",
                "description": "¬øSe adapta la interfaz en m√≥vil?",
                "details": [
                    "- Abrir herramientas de desarrollador (F12)",
                    "- Activar modo m√≥vil/responsive",
                    "- Verificar que la interfaz se adapta",
                    "- Botones t√°ctiles de tama√±o adecuado"
                ]
            },
            {
                "step": 6,
                "title": "Verificar Animaciones",
                "description": "¬øFuncionan las animaciones cyberpunk?",
                "details": [
                    "- Efectos de hover en botones",
                    "- Animaciones de brillo en texto",
                    "- Transiciones suaves",
                    "- Efectos de escaneo en VNC viewer"
                ]
            }
        ]
        
        results = {}
        
        for check in visual_checks:
            logger.info(f"\nüìã PASO {check['step']}: {check['title']}")
            logger.info("-" * 50)
            logger.info(f"üéØ {check['description']}")
            logger.info("\nüìù Detalles a verificar:")
            for detail in check['details']:
                logger.info(f"  {detail}")
            
            # Esperar input del usuario
            while True:
                try:
                    response = input(f"\n‚úÖ ¬øPaso {check['step']} completado correctamente? (s/n/ayuda): ").lower().strip()
                    
                    if response in ['s', 'si', 's√≠', 'y', 'yes']:
                        results[f"step_{check['step']}"] = {"passed": True, "title": check['title']}
                        logger.info(f"‚úÖ Paso {check['step']} marcado como exitoso")
                        break
                    elif response in ['n', 'no']:
                        issue = input("‚ùì Describe el problema encontrado: ").strip()
                        results[f"step_{check['step']}"] = {
                            "passed": False, 
                            "title": check['title'],
                            "issue": issue
                        }
                        logger.info(f"‚ùå Paso {check['step']} marcado como fallido")
                        break
                    elif response in ['ayuda', 'help', 'h']:
                        await self.show_help(check['step'])
                    else:
                        logger.info("‚ùì Respuesta no v√°lida. Usa: s/n/ayuda")
                        
                except KeyboardInterrupt:
                    logger.info("\n‚ö†Ô∏è Test interrumpido")
                    return results
        
        # Generar reporte final
        await self.generate_visual_report(results)
        return results
    
    async def show_help(self, step: int):
        """Mostrar ayuda espec√≠fica para cada paso"""
        help_info = {
            1: {
                "title": "Ayuda: Verificar Interfaz Cyberpunk",
                "tips": [
                    "üîç Busca colores brillantes (cyan, magenta, verde ne√≥n)",
                    "üåü Los bordes deben tener efectos de brillo",
                    "üé® El fondo debe ser oscuro con gradientes",
                    "üìù El t√≠tulo debe decir 'AUTONOBOT - Navegador Aut√≥nomo'",
                    "‚ö° Si no ves efectos cyberpunk, verifica que el CSS se carg√≥"
                ]
            },
            2: {
                "title": "Ayuda: Verificar Localizaci√≥n",
                "tips": [
                    "üá™üá∏ Todos los textos deben estar en espa√±ol",
                    "üìë Revisa los nombres de las pesta√±as",
                    "üîò Verifica etiquetas de botones y campos",
                    "üí¨ Los mensajes de estado deben estar en espa√±ol",
                    "‚ö†Ô∏è Si ves texto en ingl√©s, reporta d√≥nde"
                ]
            },
            3: {
                "title": "Ayuda: Probar Modo VNC",
                "tips": [
                    "üñ±Ô∏è Ve a la pesta√±a 'Agente Interactivo'",
                    "üîÑ Busca el selector 'Modo de Visualizaci√≥n'",
                    "üì∫ Cambia a 'Visor Remoto VNC'",
                    "üöÄ Debe aparecer bot√≥n 'Activar Visor VNC'",
                    "‚ö° Si no aparece, verifica la configuraci√≥n VNC"
                ]
            },
            4: {
                "title": "Ayuda: Verificar Visor VNC",
                "tips": [
                    "üñ•Ô∏è Debe abrirse una nueva ventana o modal",
                    "üé® La interfaz del visor debe tener tema cyberpunk",
                    "üîß Verifica que los botones funcionen",
                    "üì± Prueba en modo pantalla completa",
                    "üîÑ Prueba el bot√≥n de reconexi√≥n"
                ]
            },
            5: {
                "title": "Ayuda: Verificar Responsividad",
                "tips": [
                    "üîß Abre DevTools (F12)",
                    "üì± Activa modo responsive/m√≥vil",
                    "üìè Cambia el tama√±o de pantalla",
                    "üëÜ Verifica que los botones sean t√°ctiles",
                    "üé® La interfaz debe adaptarse sin romperse"
                ]
            },
            6: {
                "title": "Ayuda: Verificar Animaciones",
                "tips": [
                    "üñ±Ô∏è Pasa el mouse sobre botones y elementos",
                    "‚ú® Debe haber efectos de brillo y hover",
                    "üîÑ Las transiciones deben ser suaves",
                    "‚ö° El texto del t√≠tulo debe tener animaci√≥n",
                    "üé≠ En el VNC viewer debe haber efecto de escaneo"
                ]
            }
        }
        
        if step in help_info:
            info = help_info[step]
            logger.info(f"\nüí° {info['title']}")
            logger.info("-" * 40)
            for tip in info['tips']:
                logger.info(f"  {tip}")
        else:
            logger.info("‚ùì No hay ayuda espec√≠fica para este paso")
    
    async def generate_visual_report(self, results: Dict[str, Any]):
        """Generar reporte de evaluaci√≥n visual"""
        logger.info("\n" + "="*60)
        logger.info("üìä REPORTE DE EVALUACI√ìN VISUAL")
        logger.info("="*60)
        
        total_steps = len(results)
        passed_steps = sum(1 for result in results.values() if result.get("passed", False))
        
        logger.info(f"üìà Pasos evaluados: {total_steps}")
        logger.info(f"‚úÖ Pasos exitosos: {passed_steps}")
        logger.info(f"‚ùå Pasos fallidos: {total_steps - passed_steps}")
        logger.info(f"üéØ Porcentaje de √©xito: {(passed_steps/total_steps)*100:.1f}%")
        
        logger.info("\nüìã Detalle por paso:")
        for step_key, result in results.items():
            status = "‚úÖ" if result.get("passed", False) else "‚ùå"
            logger.info(f"  {status} {result['title']}")
            if not result.get("passed", False) and "issue" in result:
                logger.info(f"    üêõ Problema: {result['issue']}")
        
        # Recomendaciones
        logger.info("\nüí° RECOMENDACIONES:")
        if passed_steps == total_steps:
            logger.info("  üéâ ¬°Perfecto! La visualizaci√≥n VNC funciona excelentemente")
            logger.info("  üöÄ El sistema est√° listo para uso en producci√≥n")
        elif passed_steps >= total_steps * 0.8:
            logger.info("  üëç La visualizaci√≥n funciona bien con problemas menores")
            logger.info("  üîß Revisar los problemas reportados para optimizaci√≥n")
        else:
            logger.info("  ‚ö†Ô∏è Se encontraron varios problemas de visualizaci√≥n")
            logger.info("  üõ†Ô∏è Se requiere revisi√≥n y correcci√≥n antes de usar")
        
        # Guardar reporte
        report_data = {
            "timestamp": time.strftime("%Y-%m-%d %H:%M:%S"),
            "test_type": "Visual Interactive Test",
            "total_steps": total_steps,
            "passed_steps": passed_steps,
            "success_rate": (passed_steps/total_steps)*100,
            "results": results,
            "system_info": {
                "platform": platform.system(),
                "python_version": sys.version
            }
        }
        
        with open("vnc_visual_test_report.json", "w", encoding="utf-8") as f:
            json.dump(report_data, f, indent=2, ensure_ascii=False)
        
        logger.info(f"\nüìÑ Reporte visual guardado en: vnc_visual_test_report.json")
    
    async def cleanup(self):
        """Limpiar recursos"""
        logger.info("\nüßπ Limpiando recursos...")
        
        if self.webui_process:
            try:
                self.webui_process.terminate()
                self.webui_process.wait(timeout=5)
                logger.info("‚úÖ WebUI detenido")
            except:
                try:
                    self.webui_process.kill()
                    logger.info("‚ö° WebUI forzado a cerrar")
                except:
                    logger.warning("‚ö†Ô∏è No se pudo detener WebUI completamente")


async def main():
    """Funci√≥n principal"""
    logger.info("üé® AUTONOBOT - Test Visual Interactivo de VNC")
    logger.info("="*50)
    logger.info("Este test te guiar√° para evaluar visualmente el sistema VNC")
    logger.info("Se abrir√°n ventanas autom√°ticamente para la evaluaci√≥n")
    logger.info("="*50)
    
    input("üì± Presiona Enter para comenzar el test visual...")
    
    test_suite = VNCVisualInteractiveTest()
    await test_suite.run_interactive_test()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã Test cancelado por el usuario")
    except Exception as e:
        print(f"\n‚ùå Error: {e}")
