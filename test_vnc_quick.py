#!/usr/bin/env python3
"""
Test r√°pido para verificar que el VNC se visualice correctamente
"""

import asyncio
import logging
import subprocess
import sys
import time
import requests
import socket
import webbrowser
from typing import Dict, Any

# Configurar logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class QuickVNCTest:
    """Test r√°pido de VNC"""
    
    def __init__(self):
        self.test_port = 7792
        self.webui_process = None
        
    async def run_quick_test(self):
        """Ejecutar test r√°pido"""
        logger.info("‚ö° AUTONOBOT - Test R√°pido de VNC")
        logger.info("="*40)
        
        try:
            # Test 1: Verificar dependencias
            logger.info("üîç 1. Verificando dependencias...")
            if not await self.check_dependencies():
                return False
            
            # Test 2: Iniciar WebUI
            logger.info("üöÄ 2. Iniciando WebUI...")
            if not await self.start_webui():
                return False
            
            # Test 3: Verificar interfaz cyberpunk
            logger.info("üé® 3. Verificando interfaz cyberpunk...")
            if not await self.check_cyberpunk_interface():
                return False
            
            # Test 4: Probar VNC
            logger.info("üì∫ 4. Probando funcionalidad VNC...")
            vnc_result = await self.test_vnc_functionality()
            
            # Test 5: Abrir navegador para verificaci√≥n visual
            logger.info("üåê 5. Abriendo navegador para verificaci√≥n...")
            await self.open_for_visual_check()
            
            # Resumen
            await self.show_summary(vnc_result)
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Error en test r√°pido: {e}")
            return False
        finally:
            await self.cleanup()
    
    async def check_dependencies(self) -> bool:
        """Verificar dependencias b√°sicas"""
        try:
            # Verificar Gradio
            import gradio
            logger.info(f"  ‚úÖ Gradio {gradio.__version__}")
            
            # Verificar requests
            import requests
            logger.info(f"  ‚úÖ Requests disponible")
            
            # Verificar puerto disponible
            if self.is_port_available(self.test_port):
                logger.info(f"  ‚úÖ Puerto {self.test_port} disponible")
            else:
                logger.error(f"  ‚ùå Puerto {self.test_port} ocupado")
                return False
            
            return True
            
        except ImportError as e:
            logger.error(f"  ‚ùå Dependencia faltante: {e}")
            return False
    
    async def start_webui(self) -> bool:
        """Iniciar WebUI"""
        try:
            self.webui_process = subprocess.Popen(
                [sys.executable, "webui.py", "--port", str(self.test_port)],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE
            )
            
            # Esperar inicio
            logger.info("  ‚è≥ Esperando inicio del WebUI...")
            await asyncio.sleep(15)
            
            # Verificar que est√© corriendo
            if self.webui_process.poll() is not None:
                stdout, stderr = self.webui_process.communicate()
                logger.error(f"  ‚ùå WebUI fall√≥: {stderr.decode()}")
                return False
            
            # Test de conectividad
            try:
                response = requests.get(f"http://127.0.0.1:{self.test_port}", timeout=10)
                if response.status_code == 200:
                    logger.info("  ‚úÖ WebUI iniciado correctamente")
                    return True
                else:
                    logger.error(f"  ‚ùå WebUI responde con c√≥digo {response.status_code}")
                    return False
            except requests.RequestException as e:
                logger.error(f"  ‚ùå No se puede conectar al WebUI: {e}")
                return False
                
        except Exception as e:
            logger.error(f"  ‚ùå Error iniciando WebUI: {e}")
            return False
    
    async def check_cyberpunk_interface(self) -> bool:
        """Verificar interfaz cyberpunk"""
        try:
            response = requests.get(f"http://127.0.0.1:{self.test_port}", timeout=10)
            
            if response.status_code != 200:
                logger.error(f"  ‚ùå Error HTTP: {response.status_code}")
                return False
            
            content = response.text
            
            # Verificar elementos cyberpunk
            cyberpunk_checks = [
                ("AUTONOBOT", "T√≠tulo de la aplicaci√≥n"),
                ("Navegador Autonomo", "Subt√≠tulo en espa√±ol"),
                ("--cyber-primary", "Variables CSS cyberpunk"),
                ("#00ffff", "Color cyan cyberpunk"),
                ("cyberpunk-glow", "Animaciones cyberpunk"),
                ("Orbitron", "Fuente cyberpunk"),
                ("Configuracion de Agente", "Localizaci√≥n espa√±ola")
            ]
            
            found_elements = []
            missing_elements = []
            
            for element, description in cyberpunk_checks:
                if element in content:
                    found_elements.append((element, description))
                    logger.info(f"    ‚úÖ {description}")
                else:
                    missing_elements.append((element, description))
                    logger.warning(f"    ‚ö†Ô∏è Falta: {description}")
            
            success_rate = len(found_elements) / len(cyberpunk_checks)
            
            if success_rate >= 0.8:
                logger.info(f"  ‚úÖ Interfaz cyberpunk OK ({success_rate*100:.0f}%)")
                return True
            else:
                logger.warning(f"  ‚ö†Ô∏è Interfaz cyberpunk incompleta ({success_rate*100:.0f}%)")
                return False
                
        except Exception as e:
            logger.error(f"  ‚ùå Error verificando interfaz: {e}")
            return False
    
    async def test_vnc_functionality(self) -> Dict[str, Any]:
        """Probar funcionalidad VNC"""
        try:
            # Importar VNC manager
            from src.vnc.vnc_server import vnc_manager
            
            # Intentar iniciar VNC
            logger.info("  üîÑ Iniciando servidor VNC...")
            vnc_result = await vnc_manager.start_server("quick_test")
            
            if vnc_result.get("status") == "success":
                port = vnc_result.get("port")
                method = vnc_result.get("method", "Desconocido")
                
                logger.info(f"  ‚úÖ VNC iniciado en puerto {port} (m√©todo: {method})")
                
                # Test de conectividad
                if await self.test_vnc_connection(port):
                    logger.info("  ‚úÖ Conectividad VNC OK")
                    return {
                        "success": True,
                        "port": port,
                        "method": method,
                        "connectivity": True
                    }
                else:
                    logger.warning("  ‚ö†Ô∏è VNC iniciado pero sin conectividad")
                    return {
                        "success": True,
                        "port": port,
                        "method": method,
                        "connectivity": False
                    }
            else:
                error = vnc_result.get("error", "Error desconocido")
                logger.warning(f"  ‚ö†Ô∏è VNC no pudo iniciar: {error}")
                return {
                    "success": False,
                    "error": error,
                    "suggestions": vnc_result.get("suggestions", [])
                }
                
        except Exception as e:
            logger.error(f"  ‚ùå Error en test VNC: {e}")
            return {"success": False, "error": str(e)}
    
    async def test_vnc_connection(self, port: int) -> bool:
        """Probar conexi√≥n VNC"""
        try:
            # Test TCP
            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
                s.settimeout(3)
                result = s.connect_ex(('127.0.0.1', port))
                if result == 0:
                    return True
            
            # Test HTTP (para mock server)
            try:
                response = requests.get(f"http://127.0.0.1:{port}", timeout=3)
                return response.status_code == 200
            except:
                pass
            
            return False
            
        except Exception:
            return False
    
    async def open_for_visual_check(self):
        """Abrir navegador para verificaci√≥n visual"""
        try:
            url = f"http://127.0.0.1:{self.test_port}"
            logger.info(f"  üåê Abriendo: {url}")
            webbrowser.open(url)
            
            logger.info("  üëÄ Verifica visualmente:")
            logger.info("    - Interfaz cyberpunk (colores ne√≥n, efectos)")
            logger.info("    - Textos en espa√±ol")
            logger.info("    - Funcionalidad VNC en 'Agente Interactivo'")
            
        except Exception as e:
            logger.warning(f"  ‚ö†Ô∏è No se pudo abrir navegador: {e}")
            logger.info(f"  üîó Abrir manualmente: http://127.0.0.1:{self.test_port}")
    
    async def show_summary(self, vnc_result: Dict[str, Any]):
        """Mostrar resumen del test"""
        logger.info("\n" + "="*50)
        logger.info("üìä RESUMEN DEL TEST R√ÅPIDO")
        logger.info("="*50)
        
        # Estado general
        if vnc_result.get("success", False):
            logger.info("üéâ Estado general: ‚úÖ EXITOSO")
        else:
            logger.info("‚ö†Ô∏è Estado general: ‚ùå CON PROBLEMAS")
        
        # Detalles VNC
        if vnc_result.get("success", False):
            logger.info(f"üì∫ VNC: ‚úÖ Funcionando en puerto {vnc_result.get('port')}")
            logger.info(f"üîß M√©todo: {vnc_result.get('method', 'Desconocido')}")
            
            if vnc_result.get("connectivity", False):
                logger.info("üåê Conectividad: ‚úÖ OK")
            else:
                logger.info("üåê Conectividad: ‚ö†Ô∏è Limitada")
        else:
            logger.info("üì∫ VNC: ‚ùå No funciona")
            if "error" in vnc_result:
                logger.info(f"üêõ Error: {vnc_result['error']}")
        
        # Instrucciones
        logger.info("\nüí° PR√ìXIMOS PASOS:")
        logger.info("1. üñ±Ô∏è Ve a la pesta√±a 'Agente Interactivo'")
        logger.info("2. üîÑ Cambia a 'Visor Remoto VNC'")
        logger.info("3. üöÄ Haz clic en 'Activar Visor VNC'")
        logger.info("4. üëÄ Verifica que se abra el visor con tema cyberpunk")
        
        if not vnc_result.get("success", False):
            logger.info("\nüõ†Ô∏è SOLUCI√ìN DE PROBLEMAS:")
            logger.info("- En Windows: Ejecuta 'python setup_windows_vnc.py'")
            logger.info("- Verifica que no hay firewall bloqueando")
            logger.info("- Intenta reiniciar la aplicaci√≥n")
        
        # Esperar input del usuario
        input("\nüì± Presiona Enter cuando hayas terminado la verificaci√≥n visual...")
    
    def is_port_available(self, port: int) -> bool:
        """Verificar si puerto est√° disponible"""
        try:
            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
                s.bind(('127.0.0.1', port))
                return True
        except OSError:
            return False
    
    async def cleanup(self):
        """Limpiar recursos"""
        logger.info("\nüßπ Limpiando recursos...")
        
        # Detener WebUI
        if self.webui_process:
            try:
                self.webui_process.terminate()
                self.webui_process.wait(timeout=5)
                logger.info("‚úÖ WebUI detenido")
            except:
                try:
                    self.webui_process.kill()
                except:
                    pass
        
        # Detener VNC
        try:
            from src.vnc.vnc_server import vnc_manager
            await vnc_manager.stop_server("quick_test")
            logger.info("‚úÖ VNC detenido")
        except:
            pass


async def main():
    """Funci√≥n principal"""
    print("‚ö° AUTONOBOT - Test R√°pido de Visualizaci√≥n VNC")
    print("=" * 45)
    print("Este test verifica r√°pidamente que el VNC funcione correctamente")
    print("=" * 45)
    
    test = QuickVNCTest()
    success = await test.run_quick_test()
    
    if success:
        print("\nüéâ Test completado. Revisa la ventana del navegador.")
    else:
        print("\n‚ùå Test fall√≥. Revisa los errores arriba.")


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã Test cancelado")
    except Exception as e:
        print(f"\n‚ùå Error: {e}")
